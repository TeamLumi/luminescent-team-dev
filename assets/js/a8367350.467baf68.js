"use strict";(self.webpackChunkluminescent_team=self.webpackChunkluminescent_team||[]).push([[18252],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=i,h=m["".concat(p,".").concat(u)]||m[u]||c[u]||o;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},36164:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));const o={sidebar_position:1},r="Exefs Modding Guide",l={unversionedId:"exefs/guide",id:"exefs/guide",title:"Exefs Modding Guide",description:"Introduction",source:"@site/rom-hacking/exefs/guide.md",sourceDirName:"exefs",slug:"/exefs/guide",permalink:"/rom-hacking/exefs/guide",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"ROMHackingSidebar",previous:{title:"Exefs Editing",permalink:"/rom-hacking/category/exefs-editing"},next:{title:"Setting Up Ghidra",permalink:"/rom-hacking/exefs/ghidra"}},p={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Setup",id:"setup",level:2},{value:"Building",id:"building",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Next Steps",id:"next-steps",level:2}],d={toc:s};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"exefs-modding-guide"},"Exefs Modding Guide"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"There are a few main components to exefs modding that you will need to have at least a basic understanding of."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Using Ghidra/IDA to research"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developer.arm.com/documentation/ddi0487/ha/?lang=en"},"ARM opcodes")),(0,i.kt)("li",{parentName:"ul"},"Using Starlight to compile c++ code")),(0,i.kt)("p",null,"The basic format is to use ghidra to find an offset where we want to inject custom code. We then write c++ code and build it using starlight. This then gives us IPS patches we can install on our switch or emulator."),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"/rom-hacking/exefs/ghidra"},"Set up Ghidra"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"/rom-hacking/exefs/starlight"},"Set up Starlight")))),(0,i.kt)("h2",{id:"building"},"Building"),(0,i.kt)("p",null,"The Starlight template has build options for ",(0,i.kt)("inlineCode",{parentName:"p"},"atmosphere"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"yuzu"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ryujinx")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"simplemodmanager"),", when you build for any of these targets it will output files and folders in the correct directory structure to be dumped into the mods folder."),(0,i.kt)("p",null,"To build you mod into an IPS Patch simply run the following commands."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cmake . -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain.cmake  # Configure tasks\nmake release_<target>                                 # build tree\nmake zip_<target>                                     # export as zip\nmake send_<target>                                    # optional: send to switch using ftp (only supports atmosphere and simplemodmanager) \n")),(0,i.kt)("p",null,"To build for another target simply replace ",(0,i.kt)("inlineCode",{parentName:"p"},"<target>")," with your build target e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"atmosphere")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"make release_atmosphere\n")),(0,i.kt)("h2",{id:"example-usage"},"Example Usage"),(0,i.kt)("p",null,"lets go through an example of disabling the affection mechanic.",(0,i.kt)("br",{parentName:"p"}),"\n","This is something you could pretty easily do without Starlight but its a decent example."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Set up your development enviroment as above.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use Ghidra (and/or dnSpy) to find the offset to a function where you want to inject your custom code. This is probably going to be the hardest part, we need to look through the code and find the relevant location for our injection."),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Lets open ghidra and search through the functions using the Symbol Tree on the left sidebar."),(0,i.kt)("li",{parentName:"ol"},"Just from messing around in the files we know ",(0,i.kt)("inlineCode",{parentName:"li"},"Dpr")," is where most game functions are. Within this we know affection is a battle mechanic so lets look under ",(0,i.kt)("inlineCode",{parentName:"li"},"Dpr.Battle.Logic"),".  "),(0,i.kt)("li",{parentName:"ol"},"After a bit of searching around we find a function in the ",(0,i.kt)("inlineCode",{parentName:"li"},"MainModule")," called ",(0,i.kt)("inlineCode",{parentName:"li"},"Dpr.Battle.Logic.MainModule$$IsFriendshipActive")," which returns a ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean"),", this looks correct so lets assume it is and test it."),(0,i.kt)("li",{parentName:"ol"},"The function starts at the adress of ",(0,i.kt)("inlineCode",{parentName:"li"},"71020378d0")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"BD-1.3.0")," which equates to an offset of ",(0,i.kt)("inlineCode",{parentName:"li"},"020378d0"),"."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create an ",(0,i.kt)("inlineCode",{parentName:"p"},".slpatch")," file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"patches")," directory which states the offset to inject your code and the function to run."),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Lets create a new file ",(0,i.kt)("inlineCode",{parentName:"li"},"patches\\affection.slpatch")),(0,i.kt)("li",{parentName:"ol"},"At the top of the file add the target file and version ",(0,i.kt)("inlineCode",{parentName:"li"},"[target=main, version=bd_130]")),(0,i.kt)("li",{parentName:"ol"},"Add the offset where we want to inject our code and a colon, ",(0,i.kt)("inlineCode",{parentName:"li"},"020378d0:")),(0,i.kt)("li",{parentName:"ol"},"Each line under this thats indented is the code to run as ASM codes. (See the ARM opcodes reference) As we want to branch to a new function lets add ",(0,i.kt)("inlineCode",{parentName:"li"},"b")," and the name of the function we will be making in the next step. e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"b affection"))),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-asm",metastring:'title="patches\\affection.slpatch"',title:'"patches\\affection.slpatch"'},"[target=main, version=bd_130]\n020378d0:  // Dpr.Battle.Logic.MainModule$$IsFriendshipActive\n   b affection\n")),(0,i.kt)("admonition",{parentName:"li",type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"affection")," is the name of a global namespace function we will define in the next step"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"c++")," file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," directory which contains the code to be run."),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Lets create a new file ",(0,i.kt)("inlineCode",{parentName:"li"},"src\\affection.cpp")),(0,i.kt)("li",{parentName:"ol"},"Within this file lets create a function that matches the one we found earlier but lets name it ",(0,i.kt)("inlineCode",{parentName:"li"},"affection"),".",(0,i.kt)("br",{parentName:"li"}),"You'll notice that to make it match it needs to take an argument ",(0,i.kt)("inlineCode",{parentName:"li"},"Dpr_Battle_Logic_MainModule_o* mainModule"),", we will need to add ",(0,i.kt)("inlineCode",{parentName:"li"},'#include "il2cpp.h"')," to the top of the file to include the types from the original program."),(0,i.kt)("li",{parentName:"ol"},"Inside this function lets just make it ",(0,i.kt)("inlineCode",{parentName:"li"},"return false;"))),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="src\\affection.cpp"',title:'"src\\affection.cpp"'},'#include "il2cpp.h"\n\nbool affection(Dpr_Battle_Logic_MainModule_o* mainModule) {\n    return false;\n}\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Build your mod as above.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install and test your new mod on your target platform."))),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"To accomplish mods that are more complicated you'll need to learn more about AARCH64 opcodes and c++ ",(0,i.kt)("a",{parentName:"p",href:"/rom-hacking/exefs/headers"},"headers"),". If you want to access internal functions, you will need to add their ",(0,i.kt)("a",{parentName:"p",href:"/rom-hacking/exefs/symbols"},"Symbol locations")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"symbols.ld"),". When you run in to issues, ",(0,i.kt)("a",{parentName:"p",href:"/rom-hacking/exefs/debugging"},"debugging")," and ",(0,i.kt)("a",{parentName:"p",href:"/rom-hacking/exefs/logging"},"logging")," are useful tools to help resolve them."),(0,i.kt)("p",null,"Check the side bar for more info on these topics."))}c.isMDXComponent=!0}}]);